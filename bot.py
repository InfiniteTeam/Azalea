import discord
from discord.ext import commands, tasks
import datetime
import json
import asyncio
import platform
import pymysql
import os
import io
import sys
import logging
import logging.handlers
import traceback
import paramiko
from random import randint
from exts.utils import errors, checks, msglogger, emojictrl, permutil, itemmgr, dbctrl, cmdnamesutil
from exts.utils.azalea import Azalea

# Local Data Load
with open('./data/config.json', 'r', encoding='utf-8') as config_file:
    config = json.load(config_file)
with open('./data/version.json', 'r', encoding='utf-8') as version_file:
    version = json.load(version_file)
with open('./data/color.json', 'r', encoding='utf-8') as color_file:
    color = json.load(color_file)
with open('./data/emojis.json', 'r', encoding='utf-8') as emojis_file:
    emojis = json.load(emojis_file)
with open('./data/prefixes.json', 'r', encoding='utf-8') as prefixes_file:
    prefixes = json.load(prefixes_file)['prefixes']
    prefix = prefixes[0]

dbc = dbctrl.DBctrl('./db')


print(dbc.dbs)

templates = {}
# Load Templates
with open('./templates/baseitem.json', encoding='utf-8') as baseitem_file:
    templates['baseitem'] = json.load(baseitem_file)

# Make Dir
reqdirs = ['./logs', './logs/azalea', './logs/error', './logs/ping', './logs/discord']
for dit in reqdirs:
    if not os.path.isdir(dit):
        os.makedirs(dit)

logger = logging.getLogger('azalea')
logger.setLevel(logging.DEBUG)
log_formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
log_streamh = logging.StreamHandler()
log_streamh.setFormatter(log_formatter)
logger.addHandler(log_streamh)
log_fileh = logging.handlers.RotatingFileHandler('./logs/azalea/azalea.log', maxBytes=config['maxlogbytes'], backupCount=10)
log_fileh.setFormatter(log_formatter)
logger.addHandler(log_fileh)

dlogger = logging.getLogger('discord')
dlogger.setLevel(logging.INFO)
dhandler = logging.handlers.RotatingFileHandler(filename='./logs/discord/discord.log', maxBytes=config['maxlogbytes'], backupCount=10)
dformatter = logging.Formatter('%(asctime)s - %(levelname)s - %(name)s: %(message)s')
dlog_streamh = logging.StreamHandler()
dhandler.setFormatter(dformatter)
dlog_streamh.setFormatter(dformatter)
dlogger.addHandler(dhandler)
dlogger.addHandler(dlog_streamh)

pinglogger = logging.getLogger('ping')
pinglogger.setLevel(logging.INFO)
ping_formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
ping_fileh = logging.handlers.RotatingFileHandler('./logs/ping/ping.log', maxBytes=config['maxlogbytes'], backupCount=10)
ping_fileh.setFormatter(ping_formatter)
pinglogger.addHandler(ping_fileh)

errlogger = logging.getLogger('error')
errlogger.setLevel(logging.DEBUG)
err_formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
err_streamh = logging.StreamHandler()
err_streamh.setFormatter(err_formatter)
errlogger.addHandler(err_streamh)
err_fileh = logging.handlers.RotatingFileHandler('./logs/error/error.log', maxBytes=config['maxlogbytes'], backupCount=10)
err_fileh.setFormatter(err_formatter)
errlogger.addHandler(err_fileh)

logger.info('========== START ==========')

# IMPORTant data
if platform.system() == 'Windows':
    if config['betamode'] == False:
        with open(os.path.abspath(config['securedir']['Windows']) + '\\' + config['tokenFileName'], encoding='utf-8') as token_file:
            token = token_file.read()
    else:
        with open(os.path.abspath(config['securedir']['Windows']) + '\\' + config['betatokenFileName'], encoding='utf-8') as token_file:
            token = token_file.read()
    with open(os.path.abspath(config['securedir']['Windows']) + '\\' + config['dbacName'], encoding='utf-8') as dbac_file:
        dbac = json.load(dbac_file)
    with open(os.path.abspath(config['securedir']['Windows']) + '\\' + config['sshFileName'], encoding='utf-8') as ssh_file:
        ssh = json.load(ssh_file)
elif platform.system() == 'Linux':
    if config['is_android']:
        if config['betamode'] == False:
            with open(os.path.abspath(config['securedir']['Android']) + '/' + config['tokenFileName'], encoding='utf-8') as token_file:
                token = token_file.read()
        else:
            with open(os.path.abspath(config['securedir']['Android']) + '/' + config['betatokenFileName'], encoding='utf-8') as token_file:
                token = token_file.read()
        with open(os.path.abspath(config['securedir']['Android']) + '/' + config['dbacName'], encoding='utf-8') as dbac_file:
            dbac = json.load(dbac_file)
        with open(os.path.abspath(config['securedir']['Android']) + '/' + config['sshFileName'], encoding='utf-8') as ssh_file:
            ssh = json.load(ssh_file)
    else:
        if config['betamode'] == False:
            with open(os.path.abspath(config['securedir']['Linux']) + '/' + config['tokenFileName'], encoding='utf-8') as token_file:
                token = token_file.read()
        else:
            with open(os.path.abspath(config['securedir']['Linux']) + '/' + config['betatokenFileName'], encoding='utf-8') as token_file:
                token = token_file.read()
        with open(os.path.abspath(config['securedir']['Linux']) + '/' + config['dbacName'], encoding='utf-8') as dbac_file:
            dbac = json.load(dbac_file)
        with open(os.path.abspath(config['securedir']['Linux']) + '/' + config['sshFileName'], encoding='utf-8') as ssh_file:
            ssh = json.load(ssh_file)

# SSH Connect
sshclient = paramiko.SSHClient()
sshclient.set_missing_host_key_policy(paramiko.AutoAddPolicy)
sshclient.connect(ssh['host'], username=ssh['user'], password=ssh['password'], port=ssh['port'])

async def dbcmd(cmd):
    stdin, stdout, stderr = await client.loop.run_in_executor(None, sshclient.exec_command, cmd)
    lines = stdout.readlines()
    return ''.join(lines)

# DB Connect
dbkey = 'default'
if config['betamode']:
    dbkey = 'beta'

db = pymysql.connect(
    host=dbac[dbkey]['host'],
    user=dbac[dbkey]['dbUser'],
    password=dbac[dbkey]['dbPassword'],
    db=dbac[dbkey]['dbName'],
    charset='utf8',
    autocommit=True
)
cur = db.cursor(pymysql.cursors.DictCursor)

client = Azalea(command_prefix=prefixes, error=errors, status=discord.Status.dnd, activity=discord.Game('ÏïÑÏ†§Î¶¨ÏïÑ ÏãúÏûë'))
client.remove_command('help')
msglog = msglogger.Msglog(logger)
cnameutil = cmdnamesutil.CmdnamesUtil(logger, dbc, 'cmdnames')

for i in color.keys(): # convert HEX to DEC
    color[i] = int(color[i], 16)

check = checks.Checks(cur)
emj = emojictrl.Emoji(client, emojis['emoji-server'], emojis['emojis'])
imgr = itemmgr.ItemMgr(cur, dbc.dbs['items']['itemdb'])

gamenum = 0

@client.event
async def on_ready():
    logger.info(f'Î°úÍ∑∏Ïù∏: {client.user.id}')
    logger.info('Î∞±Í∑∏ÎùºÏö¥Îìú Î£®ÌîÑÎ•º ÏãúÏûëÌï©ÎãàÎã§.')
    await client.change_presence(status=discord.Status.online)
    pingloop.start()
    if config['betamode']:  
        logger.warning('BETA MODE ENABLED')

@tasks.loop(seconds=5)
async def pingloop():
    try:
        ping = int(client.latency*100000)/100
        if ping <= 100:
            pinglevel = 'üîµ Îß§Ïö∞Ï¢ãÏùå'
        elif ping <= 300:
            pinglevel = 'üü¢ ÏñëÌò∏Ìï®'
        elif ping <= 500:
            pinglevel = 'üü° Î≥¥ÌÜµ'
        elif ping <= 700:
            pinglevel = 'üî¥ ÎÇòÏÅ®'
        else:
            pinglevel = '‚ö™ Îß§Ïö∞ÎÇòÏÅ®'
        client.set_data('ping', (ping, pinglevel))
        pinglogger.info(f'{ping}ms')
        pinglogger.info(f'CLIENT_CONNECTED: {not client.is_closed()}')
        guildshards = {}
        for one in client.latencies:
            guildshards[one[0]] = tuple(filter(lambda guild: guild.shard_id == one[0], client.guilds))
        client.set_data('guildshards', guildshards)
        client.get_data('guildshards')
    except:
        errlogger.error(traceback.format_exc())

@client.event
async def on_error(event, *args, **kwargs):
    ignoreexc = [discord.http.NotFound]
    excinfo = sys.exc_info()
    errstr = f'{"".join(traceback.format_tb(excinfo[2]))}{excinfo[0].__name__}: {excinfo[1]}'
    errlogger.error('\n========== sERROR ==========\n' + errstr + '\n========== sERREND ==========')

@client.event
async def on_command_error(ctx: commands.Context, error: Exception):
    allerrs = (type(error), type(error.__cause__))
    tb = traceback.format_exception(type(error), error, error.__traceback__)
    origintb = traceback.format_exception(type(error), error, error.__traceback__)
    err = [line.rstrip() for line in tb]
    errstr = '\n'.join(err)
    originerr = err = [line.rstrip() for line in origintb]
    originerrstr = '\n'.join(originerr)
    if hasattr(ctx.command, 'on_error'):
        return
    elif commands.errors.MissingRequiredArgument in allerrs:
        return
    elif isinstance(error, errors.NotRegistered):
        await ctx.send(embed=discord.Embed(title='‚ùó Îì±Î°ùÎêòÏßÄ ÏïäÏùÄ ÏÇ¨Ïö©ÏûêÏûÖÎãàÎã§!', description=f'`{prefix}Îì±Î°ù` Î™ÖÎ†πÏúºÎ°ú Îì±Î°ùÌï¥Ï£ºÏÑ∏Ïöî!', color=color['error']))
        msglog.log(ctx, '[ÎØ∏Îì±Î°ù ÏÇ¨Ïö©Ïûê]')
        return
    elif isinstance(error, errors.NotMaster):
        return
    elif isinstance(error, errors.NoCharOnline):
        await ctx.send(embed=discord.Embed(title='‚ùó Ï∫êÎ¶≠ÌÑ∞Í∞Ä ÏÑ†ÌÉùÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§!', description=f'`{prefix}Ï∫êÎ¶≠ÌÑ∞Î≥ÄÍ≤Ω` Î™ÖÎ†πÏúºÎ°ú ÌîåÎ†àÏù¥Ìï† Ï∫êÎ¶≠ÌÑ∞Î•º ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî!', color=color['error']))
        msglog.log(ctx, '[Î°úÍ∑∏Ïù∏ÎêòÏßÄ ÏïäÏùå]')
        return
    elif errors.ParamsNotExist in allerrs:
        embed = discord.Embed(title=f'‚ùì Ï°¥Ïû¨ÌïòÏßÄ ÏïäÎäî Î™ÖÎ†π ÏòµÏÖòÏûÖÎãàÎã§: {", ".join(str(error.__cause__.param))}', description=f'`{prefix}ÎèÑÏõÄ` Î™ÖÎ†πÏúºÎ°ú Ï†ÑÏ≤¥ Î™ÖÎ†πÏñ¥Î•º ÌôïÏù∏Ìï† Ïàò ÏûàÏñ¥Ïöî.', color=color['error'], timestamp=datetime.datetime.utcnow())
        await ctx.send(embed=embed)
        msglog.log(ctx, '[Ï°¥Ïû¨ÌïòÏßÄ ÏïäÎäî Î™ÖÎ†π ÏòµÏÖò]')
        return
    elif isinstance(error, commands.errors.CommandNotFound):
        embed = discord.Embed(title='‚ùì Ï°¥Ïû¨ÌïòÏßÄ ÏïäÎäî Î™ÖÎ†πÏñ¥ÏûÖÎãàÎã§!', description=f'`{prefix}ÎèÑÏõÄ` Î™ÖÎ†πÏúºÎ°ú Ï†ÑÏ≤¥ Î™ÖÎ†πÏñ¥Î•º ÌôïÏù∏Ìï† Ïàò ÏûàÏñ¥Ïöî.', color=color['error'], timestamp=datetime.datetime.utcnow())
        await ctx.send(embed=embed)
        msglog.log(ctx, '[Ï°¥Ïû¨ÌïòÏßÄ ÏïäÎäî Î™ÖÎ†π]')
        return
    elif isinstance(error, errors.SentByBotUser):
        return
    elif isinstance(error, commands.NoPrivateMessage):
        embed = discord.Embed(title='‚õî Í∏∏Îìú Ï†ÑÏö© Î™ÖÎ†πÏñ¥', description='Ïù¥ Î™ÖÎ†πÏñ¥Îäî Í∏∏Îìú Ï±ÑÎÑêÏóêÏÑúÎßå ÏÇ¨Ïö©Ìï† Ïàò ÏûàÏäµÎãàÎã§!', color=color['error'], timestamp=datetime.datetime.utcnow())
        await ctx.send(embed=embed)
        msglog.log(ctx, '[Í∏∏Îìú Ï†ÑÏö© Î™ÖÎ†π]')
        return
    elif isinstance(error, commands.PrivateMessageOnly):
        embed = discord.Embed(title='‚õî DM Ï†ÑÏö© Î™ÖÎ†πÏñ¥', description='Ïù¥ Î™ÖÎ†πÏñ¥Îäî Í∞úÏù∏ Î©îÏãúÏßÄÏóêÏÑúÎßå ÏÇ¨Ïö©Ìï† Ïàò ÏûàÏäµÎãàÎã§!', color=color['error'], timestamp=datetime.datetime.utcnow())
        await ctx.send(embed=embed)
        msglog.log(ctx, '[DM Ï†ÑÏö© Î™ÖÎ†π]')
        return
    elif isinstance(error, (commands.CheckFailure, commands.MissingPermissions)):
        perms = [permutil.format_perm_by_name(perm) for perm in error.missing_perms]
        embed = discord.Embed(title='‚õî Î©§Î≤Ñ Í∂åÌïú Î∂ÄÏ°±!', description=f'{ctx.author.mention}, Ïù¥ Î™ÖÎ†πÏñ¥Î•º ÏÇ¨Ïö©ÌïòÎ†§Î©¥ Îã§ÏùåÍ≥º Í∞ôÏùÄ Í∏∏Îìú Í∂åÌïúÏù¥ ÌïÑÏöîÌï©ÎãàÎã§!\n` ' + '`, `'.join(perms) + '`', color=color['error'], timestamp=datetime.datetime.utcnow())
        await ctx.send(embed=embed)
        msglog.log(ctx, '[Î©§Î≤Ñ Í∂åÌïú Î∂ÄÏ°±]')
        return
    elif isinstance(error.__cause__, discord.HTTPException):
        if error.__cause__.code == 50013:
            missings = permutil.find_missing_perms_by_tbstr(originerrstr)
            fmtperms = [permutil.format_perm_by_name(perm) for perm in missings]
            embed = discord.Embed(title='‚õî Î¥á Í∂åÌïú Î∂ÄÏ°±!', description='Ïù¥ Î™ÖÎ†πÏñ¥Î•º ÏÇ¨Ïö©ÌïòÎäî Îç∞ ÌïÑÏöîÌïú Î¥áÏùò Í∂åÌïúÏù¥ Î∂ÄÏ°±Ìï©ÎãàÎã§!\n`' + '`, `'.join(fmtperms) + '`', color=color['error'], timestamp=datetime.datetime.utcnow())
            await ctx.send(embed=embed)
            msglog.log(ctx, '[Î¥á Í∂åÌïú Î∂ÄÏ°±]')
            return
        elif error.__cause__.code == 50035:
            embed = discord.Embed(title='‚ùó Î©îÏãúÏßÄ Ï†ÑÏÜ° Ïã§Ìå®', description='Î≥¥ÎÇ¥Î†§Í≥† ÌïòÎäî Î©îÏãúÏßÄÍ∞Ä ÎÑàÎ¨¥ Í∏∏Ïñ¥ Ï†ÑÏÜ°Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.', color=color['error'], timestamp=datetime.datetime.utcnow())
            await ctx.send(embed=embed)
            msglog.log(ctx, '[ÎÑàÎ¨¥ Í∏¥ Î©îÏãúÏßÄ Ï†ÑÏÜ° ÏãúÎèÑ]')
            return
        else:
            await ctx.send('Ïò§Î•ò ÏΩîÎìú: ' + str(error.__cause__.code))
    
    if cur.execute('select * from userdata where id=%s and type=%s', (ctx.author.id, 'Master')) == 0:
        errlogger.error('\n========== CMDERROR ==========\n' + errstr + '\n========== CMDERREND ==========')
        embed = discord.Embed(title='‚ùå Ïò§Î•ò!', description=f'Î¨¥Ïñ∏Í∞Ä Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§! Ïò§Î•ò Î©îÏãúÏßÄ:\n```python\n{str(error)}```\nÏò§Î•ò Ï†ïÎ≥¥Í∞Ä Í∏∞Î°ùÎêòÏóàÏäµÎãàÎã§. ÎÇòÏ§ëÏóê Í∞úÎ∞úÏûêÍ∞Ä Ï≤òÎ¶¨ÌïòÍ≤å ÎêòÎ©∞ Îπ†Î•∏ Ï≤òÎ¶¨Î•º ÏúÑÌï¥ÏÑúÎäî ÏÑúÌè¨Ìä∏ ÏÑúÎ≤ÑÏóê Î¨∏ÏùòÌïòÏã≠ÏãúÏò§.', color=color['error'], timestamp=datetime.datetime.utcnow())
        await ctx.send(embed=embed)
    else:
        print('\n========== CMDERROR ==========\n' + errstr + '\n========== CMDERREND ==========')
        embed = discord.Embed(title='‚ùå Ïò§Î•ò!', description=f'Î¨¥Ïñ∏Í∞Ä Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§!\n```python\n{errstr}```', color=color['error'], timestamp=datetime.datetime.utcnow())
        if ctx.channel.type != discord.ChannelType.private:
            await ctx.send(ctx.author.mention, embed=discord.Embed(title='‚ùå Ïò§Î•ò!', description='Í∞úÎ∞úÏûêÏö© Ïò§Î•ò Î©îÏãúÏßÄÎ•º DMÏúºÎ°ú Ï†ÑÏÜ°ÌñàÏäµÎãàÎã§.', color=color['error']))
        try:
            await ctx.author.send('Ïò§Î•ò Î∞úÏÉù Î™ÖÎ†πÏñ¥: `' + ctx.message.content + '`', embed=embed)
        except discord.HTTPException as exc:
            if exc.code == 50035:
                await ctx.send(embed=discord.Embed(title='‚ùå Ïò§Î•ò!', description=f'Î¨¥Ïñ∏Í∞Ä Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§. Ïò§Î•ò Î©îÏãúÏßÄÍ∞Ä ÎÑàÎ¨¥ Í∏∏Ïñ¥ ÌååÏùºÎ°ú Ï≤®Î∂ÄÎê©ÎãàÎã§.'), file=discord.File(fp=io.StringIO(errstr), filename='errcontent.txt'))
        finally:
            msglog.log(ctx, '[Ïª§Îß®Îìú Ïò§Î•ò]')

def awaiter(coro):
    return asyncio.ensure_future(coro)

client.add_check(check.notbot)

client.add_data('config', config)
client.add_data('color', color)
client.add_data('check', check)
client.add_data('emojictrl', emj)
client.add_data('msglog', msglog)
client.add_data('errlogger', errlogger)
client.add_data('logger', logger)
client.add_data('templates', templates)
client.add_data('cur', cur)
client.add_data('dbcmd', dbcmd)
client.add_data('ping', None)
client.add_data('guildshards', None)
client.add_data('version_str', version['versionPrefix'] + version['versionNum'])
client.add_data('lockedexts', ['exts.basecmds'])
client.add_data('dbc', dbc)
client.add_data('cnameutil', cnameutil)
client.add_data('awaiter', awaiter)
client.add_data('imgr', imgr)
client.add_data('start', datetime.datetime.now())

client.datas['allexts'] = []
for ext in list(filter(lambda x: x.endswith('.py'), os.listdir('./exts'))):
    client.datas['allexts'].append('exts.' + os.path.splitext(ext)[0])
    client.load_extension('exts.' + os.path.splitext(ext)[0])

client.run(token)